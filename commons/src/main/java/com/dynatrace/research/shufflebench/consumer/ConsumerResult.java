package com.dynatrace.research.shufflebench.consumer;

import com.dynatrace.research.shufflebench.record.TimestampedRecord;

import java.util.Optional;

import static java.util.Objects.requireNonNull;

/**
 * The result of a {@link StatefulConsumer#accept(TimestampedRecord, State)} call. Holds the updated {@link State} and
 * optional {@link ConsumerEvent} (e.g., an alert) generated by the {@link StatefulConsumer}.
 */
public class ConsumerResult {

    private final State state;

    private final ConsumerEvent event; // May be null

    public ConsumerResult(final State state) {
        this.state = requireNonNull(state);
        this.event = null;
    }

    public ConsumerResult(final State state, final ConsumerEvent event) {
        this.state = requireNonNull(state);
        this.event = event;
    }

    public State getState() {
        return this.state;
    }

    public Optional<ConsumerEvent> getEvent() {
        return Optional.ofNullable(this.event);
    }
}
